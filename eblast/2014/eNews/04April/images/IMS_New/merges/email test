function CheckEmail()
		{
		var Check_if_Blank = (document.PaymentInfo.Email_Address.value);
		if( Check_if_Blank == '')
			{
			alert ("E-Mail Address is required.");
			document.PaymentInfo.Email_Address.focus();
			}
		else
			{
				var filter = eval("/^([\w-]+(?:\.[\w-]+)*)@((?:[\w-]+\.)*\w[\w-]{0,66})\.([a-z]{2,6}(?:\.[a-z]{2})?)$/i")
				if  (filter.test(Check_if_Blank)==false)
				{
					alert('Invalid E-Mail Address');
					document.PaymentInfo.Email_Address.focus();
				}
			}
		}





var filter = eval("
/				open regular expression
^				matches the position at the beginning of the input string
(				beginning of pattern 1
	[\w-]				character set look for any word or dash (same as [a-zA-Z0-9\-]  )							
	+				matches the preceding subexpression one or more times
	(				beginning of pattern 2
		?:\.				optionally followed by a period
		[\w-]				character set look for any word or dash (same as [a-zA-Z0-9\-]  )	
		+				matches the preceding subexpression one or more times
	)				close pattern 2
*				matches the preceding subexpression zero or more times
)				close pattern 1
@				look for @
(				beginning of pattern 3
	(				beginning of pattern 4
		?:[\w-]		optionally has another word or dash
		+\.			followed by a period
	)				close pattern 4
	*				matches the preceding subexpression zero or more times
	\w				character set look for any word  (same as [a-zA-Z0-9]  )	
	[\w-]{0,66}		character set look for any word or dash (same as [a-zA-Z0-9\-]  )  At least 0 times; at most 66 times.
)				close pattern 3			
\.				mark next character as a special character, literal, or backreference
(				beginning of pattern 5
	[a-z]{2,6}		character set look for any lower case a-z character.  At least 2 times; at most 6 times.
	(			beginning of pattern 6
		?:\.		optionally followed by a period
		[a-z]{2}	character set look for any lower case a-z character.  Match exactly 2 times.
	)			close pattern 6
	?			matches the preceding subexpression zero or one time.
)				close pattern 5
$				matches the position at the end of the input string
/				close regular expression
i				attribute character i means pattern is case-insensitive
")



// NEW WAY
function CheckEmail()
		{
		var Check_if_Blank = (document.Event.Email_Address.value);
		var str = (document.Event.Email_Address.value);
		if( Check_if_Blank == '')
			{
			alert ("E-Mail Address is required.");
			document.Event.Email_Address.focus();
			}
		else
			{
				  var reg1 = /(@.*@)|(\.\.)|(@\.)|(\.@)|(^\.)/;					 // not valid
				  var reg2 = /^.+\@(\[?)[a-zA-Z0-9\-\.]+\.([a-zA-Z]{2,3}|[0-9]{1,3})(\]?)$/;		// valid
				  if (!reg1.test(str) && reg2.test(str))						 // if syntax is valid
					{ 
					   alert("This is a valid email address.");				 // this is optional
					   return true;
					 }
					else
					{
					alert('Invalid E-Mail Address');
					document.Event.Email_Address.focus();
					return false;
					 }
		    }
		}

// email address cannot have:     (invalid)
 var reg1 =
 /				open regular expression
	(				beginning of pattern
	@.*@)|			more than 1 @ sign -- or--
	(\.\.)|				2 periods together    -- or --
	 (@\.)|			@ immediately followed by a period -- or --
	 (\.@)|			period immediately followed by @  -- or --			
	 (^\.				period at the end
	 )				end of pattern
  /;				close regular expression

  // email address can have:     (valid)
var reg2 =
/				open regular expression
	^				start at beginning of string
	.+\@			1 or more characters before the @
	(\[?)				optional open bracket - question mark means find 0 or one time [ for email addrs like julie@[255.255.255.0]
	[a-zA-Z0-9\-\.]		any sequence of letters, numbers and periods or dash
	+\.([a-zA-Z]{2,3}|	look for a period followed by a 2-3 letter suffix --or --
	[0-9]{1,3})		the period is followed by any 1-3 digit number
	(\]?)				optional closing bracket ]
	$				end of string
/;				close regular expression